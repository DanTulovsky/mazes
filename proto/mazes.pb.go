// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mazes.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResetClientRequest struct {
	MazeId               string   `protobuf:"bytes,1,opt,name=maze_id,json=mazeId,proto3" json:"maze_id,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetClientRequest) Reset()         { *m = ResetClientRequest{} }
func (m *ResetClientRequest) String() string { return proto.CompactTextString(m) }
func (*ResetClientRequest) ProtoMessage()    {}
func (*ResetClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{0}
}

func (m *ResetClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetClientRequest.Unmarshal(m, b)
}
func (m *ResetClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetClientRequest.Marshal(b, m, deterministic)
}
func (m *ResetClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetClientRequest.Merge(m, src)
}
func (m *ResetClientRequest) XXX_Size() int {
	return xxx_messageInfo_ResetClientRequest.Size(m)
}
func (m *ResetClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetClientRequest proto.InternalMessageInfo

func (m *ResetClientRequest) GetMazeId() string {
	if m != nil {
		return m.MazeId
	}
	return ""
}

func (m *ResetClientRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type ResetClientReply struct {
	Success              bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CurrentLocation      *MazeLocation `protobuf:"bytes,3,opt,name=current_location,json=currentLocation,proto3" json:"current_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResetClientReply) Reset()         { *m = ResetClientReply{} }
func (m *ResetClientReply) String() string { return proto.CompactTextString(m) }
func (*ResetClientReply) ProtoMessage()    {}
func (*ResetClientReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{1}
}

func (m *ResetClientReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetClientReply.Unmarshal(m, b)
}
func (m *ResetClientReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetClientReply.Marshal(b, m, deterministic)
}
func (m *ResetClientReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetClientReply.Merge(m, src)
}
func (m *ResetClientReply) XXX_Size() int {
	return xxx_messageInfo_ResetClientReply.Size(m)
}
func (m *ResetClientReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetClientReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResetClientReply proto.InternalMessageInfo

func (m *ResetClientReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ResetClientReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ResetClientReply) GetCurrentLocation() *MazeLocation {
	if m != nil {
		return m.CurrentLocation
	}
	return nil
}

type ExportMazeRequest struct {
	MazeId               string   `protobuf:"bytes,1,opt,name=maze_id,json=mazeId,proto3" json:"maze_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportMazeRequest) Reset()         { *m = ExportMazeRequest{} }
func (m *ExportMazeRequest) String() string { return proto.CompactTextString(m) }
func (*ExportMazeRequest) ProtoMessage()    {}
func (*ExportMazeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{2}
}

func (m *ExportMazeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportMazeRequest.Unmarshal(m, b)
}
func (m *ExportMazeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportMazeRequest.Marshal(b, m, deterministic)
}
func (m *ExportMazeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportMazeRequest.Merge(m, src)
}
func (m *ExportMazeRequest) XXX_Size() int {
	return xxx_messageInfo_ExportMazeRequest.Size(m)
}
func (m *ExportMazeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportMazeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportMazeRequest proto.InternalMessageInfo

func (m *ExportMazeRequest) GetMazeId() string {
	if m != nil {
		return m.MazeId
	}
	return ""
}

type ExportMazeReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportMazeReply) Reset()         { *m = ExportMazeReply{} }
func (m *ExportMazeReply) String() string { return proto.CompactTextString(m) }
func (*ExportMazeReply) ProtoMessage()    {}
func (*ExportMazeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{3}
}

func (m *ExportMazeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportMazeReply.Unmarshal(m, b)
}
func (m *ExportMazeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportMazeReply.Marshal(b, m, deterministic)
}
func (m *ExportMazeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportMazeReply.Merge(m, src)
}
func (m *ExportMazeReply) XXX_Size() int {
	return xxx_messageInfo_ExportMazeReply.Size(m)
}
func (m *ExportMazeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportMazeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExportMazeReply proto.InternalMessageInfo

func (m *ExportMazeReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ExportMazeReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RegisterClientRequest struct {
	MazeId               string        `protobuf:"bytes,1,opt,name=maze_id,json=mazeId,proto3" json:"maze_id,omitempty"`
	ClientConfig         *ClientConfig `protobuf:"bytes,2,opt,name=client_config,json=clientConfig,proto3" json:"client_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegisterClientRequest) Reset()         { *m = RegisterClientRequest{} }
func (m *RegisterClientRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterClientRequest) ProtoMessage()    {}
func (*RegisterClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{4}
}

func (m *RegisterClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterClientRequest.Unmarshal(m, b)
}
func (m *RegisterClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterClientRequest.Marshal(b, m, deterministic)
}
func (m *RegisterClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientRequest.Merge(m, src)
}
func (m *RegisterClientRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterClientRequest.Size(m)
}
func (m *RegisterClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientRequest proto.InternalMessageInfo

func (m *RegisterClientRequest) GetMazeId() string {
	if m != nil {
		return m.MazeId
	}
	return ""
}

func (m *RegisterClientRequest) GetClientConfig() *ClientConfig {
	if m != nil {
		return m.ClientConfig
	}
	return nil
}

type RegisterClientReply struct {
	Success              bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ClientId             string        `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	FromCell             *MazeLocation `protobuf:"bytes,4,opt,name=from_cell,json=fromCell,proto3" json:"from_cell,omitempty"`
	ToCell               *MazeLocation `protobuf:"bytes,5,opt,name=to_cell,json=toCell,proto3" json:"to_cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegisterClientReply) Reset()         { *m = RegisterClientReply{} }
func (m *RegisterClientReply) String() string { return proto.CompactTextString(m) }
func (*RegisterClientReply) ProtoMessage()    {}
func (*RegisterClientReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{5}
}

func (m *RegisterClientReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterClientReply.Unmarshal(m, b)
}
func (m *RegisterClientReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterClientReply.Marshal(b, m, deterministic)
}
func (m *RegisterClientReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientReply.Merge(m, src)
}
func (m *RegisterClientReply) XXX_Size() int {
	return xxx_messageInfo_RegisterClientReply.Size(m)
}
func (m *RegisterClientReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientReply proto.InternalMessageInfo

func (m *RegisterClientReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RegisterClientReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RegisterClientReply) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *RegisterClientReply) GetFromCell() *MazeLocation {
	if m != nil {
		return m.FromCell
	}
	return nil
}

func (m *RegisterClientReply) GetToCell() *MazeLocation {
	if m != nil {
		return m.ToCell
	}
	return nil
}

// SolveMazeRequest is a message sent from the client trying to solve a maze
type SolveMazeRequest struct {
	MazeId    string `protobuf:"bytes,1,opt,name=mazeId,proto3" json:"mazeId,omitempty"`
	ClientId  string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Direction string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	// on first connect, this must be set true, the direction field is ignored, the client does not move
	Initial bool `protobuf:"varint,4,opt,name=initial,proto3" json:"initial,omitempty"`
	// move client back to previous location, direction is ignored
	MoveBack             bool     `protobuf:"varint,5,opt,name=move_back,json=moveBack,proto3" json:"move_back,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveMazeRequest) Reset()         { *m = SolveMazeRequest{} }
func (m *SolveMazeRequest) String() string { return proto.CompactTextString(m) }
func (*SolveMazeRequest) ProtoMessage()    {}
func (*SolveMazeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{6}
}

func (m *SolveMazeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveMazeRequest.Unmarshal(m, b)
}
func (m *SolveMazeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveMazeRequest.Marshal(b, m, deterministic)
}
func (m *SolveMazeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveMazeRequest.Merge(m, src)
}
func (m *SolveMazeRequest) XXX_Size() int {
	return xxx_messageInfo_SolveMazeRequest.Size(m)
}
func (m *SolveMazeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveMazeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SolveMazeRequest proto.InternalMessageInfo

func (m *SolveMazeRequest) GetMazeId() string {
	if m != nil {
		return m.MazeId
	}
	return ""
}

func (m *SolveMazeRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *SolveMazeRequest) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *SolveMazeRequest) GetInitial() bool {
	if m != nil {
		return m.Initial
	}
	return false
}

func (m *SolveMazeRequest) GetMoveBack() bool {
	if m != nil {
		return m.MoveBack
	}
	return false
}

// SolveMazeResponse is a response sent from the server as the client tries to solve a maze
type SolveMazeResponse struct {
	MazeId               string        `protobuf:"bytes,1,opt,name=maze_id,json=mazeId,proto3" json:"maze_id,omitempty"`
	ClientId             string        `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AvailableDirections  []*Direction  `protobuf:"bytes,3,rep,name=available_directions,json=availableDirections,proto3" json:"available_directions,omitempty"`
	Initial              bool          `protobuf:"varint,4,opt,name=initial,proto3" json:"initial,omitempty"`
	Error                bool          `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	ErrorMessage         string        `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CurrentLocation      *MazeLocation `protobuf:"bytes,7,opt,name=current_location,json=currentLocation,proto3" json:"current_location,omitempty"`
	FromCell             *MazeLocation `protobuf:"bytes,8,opt,name=from_cell,json=fromCell,proto3" json:"from_cell,omitempty"`
	ToCell               *MazeLocation `protobuf:"bytes,9,opt,name=to_cell,json=toCell,proto3" json:"to_cell,omitempty"`
	Solved               bool          `protobuf:"varint,10,opt,name=solved,proto3" json:"solved,omitempty"`
	Reward               float64       `protobuf:"fixed64,11,opt,name=reward,proto3" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SolveMazeResponse) Reset()         { *m = SolveMazeResponse{} }
func (m *SolveMazeResponse) String() string { return proto.CompactTextString(m) }
func (*SolveMazeResponse) ProtoMessage()    {}
func (*SolveMazeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{7}
}

func (m *SolveMazeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveMazeResponse.Unmarshal(m, b)
}
func (m *SolveMazeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveMazeResponse.Marshal(b, m, deterministic)
}
func (m *SolveMazeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveMazeResponse.Merge(m, src)
}
func (m *SolveMazeResponse) XXX_Size() int {
	return xxx_messageInfo_SolveMazeResponse.Size(m)
}
func (m *SolveMazeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveMazeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SolveMazeResponse proto.InternalMessageInfo

func (m *SolveMazeResponse) GetMazeId() string {
	if m != nil {
		return m.MazeId
	}
	return ""
}

func (m *SolveMazeResponse) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *SolveMazeResponse) GetAvailableDirections() []*Direction {
	if m != nil {
		return m.AvailableDirections
	}
	return nil
}

func (m *SolveMazeResponse) GetInitial() bool {
	if m != nil {
		return m.Initial
	}
	return false
}

func (m *SolveMazeResponse) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *SolveMazeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *SolveMazeResponse) GetCurrentLocation() *MazeLocation {
	if m != nil {
		return m.CurrentLocation
	}
	return nil
}

func (m *SolveMazeResponse) GetFromCell() *MazeLocation {
	if m != nil {
		return m.FromCell
	}
	return nil
}

func (m *SolveMazeResponse) GetToCell() *MazeLocation {
	if m != nil {
		return m.ToCell
	}
	return nil
}

func (m *SolveMazeResponse) GetSolved() bool {
	if m != nil {
		return m.Solved
	}
	return false
}

func (m *SolveMazeResponse) GetReward() float64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

type Direction struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Visited              bool     `protobuf:"varint,2,opt,name=visited,proto3" json:"visited,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Direction) Reset()         { *m = Direction{} }
func (m *Direction) String() string { return proto.CompactTextString(m) }
func (*Direction) ProtoMessage()    {}
func (*Direction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{8}
}

func (m *Direction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Direction.Unmarshal(m, b)
}
func (m *Direction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Direction.Marshal(b, m, deterministic)
}
func (m *Direction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Direction.Merge(m, src)
}
func (m *Direction) XXX_Size() int {
	return xxx_messageInfo_Direction.Size(m)
}
func (m *Direction) XXX_DiscardUnknown() {
	xxx_messageInfo_Direction.DiscardUnknown(m)
}

var xxx_messageInfo_Direction proto.InternalMessageInfo

func (m *Direction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Direction) GetVisited() bool {
	if m != nil {
		return m.Visited
	}
	return false
}

// Maze defines a maze and its clients
type Maze struct {
	MazeId               string   `protobuf:"bytes,1,opt,name=mazeId,proto3" json:"mazeId,omitempty"`
	Cells                []*Cell  `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	ClientIds            []string `protobuf:"bytes,3,rep,name=clientIds,proto3" json:"clientIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Maze) Reset()         { *m = Maze{} }
func (m *Maze) String() string { return proto.CompactTextString(m) }
func (*Maze) ProtoMessage()    {}
func (*Maze) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{9}
}

func (m *Maze) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Maze.Unmarshal(m, b)
}
func (m *Maze) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Maze.Marshal(b, m, deterministic)
}
func (m *Maze) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maze.Merge(m, src)
}
func (m *Maze) XXX_Size() int {
	return xxx_messageInfo_Maze.Size(m)
}
func (m *Maze) XXX_DiscardUnknown() {
	xxx_messageInfo_Maze.DiscardUnknown(m)
}

var xxx_messageInfo_Maze proto.InternalMessageInfo

func (m *Maze) GetMazeId() string {
	if m != nil {
		return m.MazeId
	}
	return ""
}

func (m *Maze) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (m *Maze) GetClientIds() []string {
	if m != nil {
		return m.ClientIds
	}
	return nil
}

type Cell struct {
	Location             *MazeLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{10}
}

func (m *Cell) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cell.Unmarshal(m, b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return xxx_messageInfo_Cell.Size(m)
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetLocation() *MazeLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

type ListMazeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMazeRequest) Reset()         { *m = ListMazeRequest{} }
func (m *ListMazeRequest) String() string { return proto.CompactTextString(m) }
func (*ListMazeRequest) ProtoMessage()    {}
func (*ListMazeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{11}
}

func (m *ListMazeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMazeRequest.Unmarshal(m, b)
}
func (m *ListMazeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMazeRequest.Marshal(b, m, deterministic)
}
func (m *ListMazeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMazeRequest.Merge(m, src)
}
func (m *ListMazeRequest) XXX_Size() int {
	return xxx_messageInfo_ListMazeRequest.Size(m)
}
func (m *ListMazeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMazeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMazeRequest proto.InternalMessageInfo

type ListMazeReply struct {
	Mazes                []*Maze  `protobuf:"bytes,1,rep,name=mazes,proto3" json:"mazes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMazeReply) Reset()         { *m = ListMazeReply{} }
func (m *ListMazeReply) String() string { return proto.CompactTextString(m) }
func (*ListMazeReply) ProtoMessage()    {}
func (*ListMazeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{12}
}

func (m *ListMazeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMazeReply.Unmarshal(m, b)
}
func (m *ListMazeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMazeReply.Marshal(b, m, deterministic)
}
func (m *ListMazeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMazeReply.Merge(m, src)
}
func (m *ListMazeReply) XXX_Size() int {
	return xxx_messageInfo_ListMazeReply.Size(m)
}
func (m *ListMazeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMazeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListMazeReply proto.InternalMessageInfo

func (m *ListMazeReply) GetMazes() []*Maze {
	if m != nil {
		return m.Mazes
	}
	return nil
}

type CreateMazeRequest struct {
	Config               *MazeConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	ReturnMaze           bool        `protobuf:"varint,2,opt,name=return_maze,json=returnMaze,proto3" json:"return_maze,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateMazeRequest) Reset()         { *m = CreateMazeRequest{} }
func (m *CreateMazeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMazeRequest) ProtoMessage()    {}
func (*CreateMazeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{13}
}

func (m *CreateMazeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMazeRequest.Unmarshal(m, b)
}
func (m *CreateMazeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMazeRequest.Marshal(b, m, deterministic)
}
func (m *CreateMazeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMazeRequest.Merge(m, src)
}
func (m *CreateMazeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMazeRequest.Size(m)
}
func (m *CreateMazeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMazeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMazeRequest proto.InternalMessageInfo

func (m *CreateMazeRequest) GetConfig() *MazeConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CreateMazeRequest) GetReturnMaze() bool {
	if m != nil {
		return m.ReturnMaze
	}
	return false
}

type CreateMazeReply struct {
	MazeId               string   `protobuf:"bytes,1,opt,name=MazeId,proto3" json:"MazeId,omitempty"`
	EncodedMaze          string   `protobuf:"bytes,2,opt,name=encoded_maze,json=encodedMaze,proto3" json:"encoded_maze,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMazeReply) Reset()         { *m = CreateMazeReply{} }
func (m *CreateMazeReply) String() string { return proto.CompactTextString(m) }
func (*CreateMazeReply) ProtoMessage()    {}
func (*CreateMazeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{14}
}

func (m *CreateMazeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMazeReply.Unmarshal(m, b)
}
func (m *CreateMazeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMazeReply.Marshal(b, m, deterministic)
}
func (m *CreateMazeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMazeReply.Merge(m, src)
}
func (m *CreateMazeReply) XXX_Size() int {
	return xxx_messageInfo_CreateMazeReply.Size(m)
}
func (m *CreateMazeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMazeReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMazeReply proto.InternalMessageInfo

func (m *CreateMazeReply) GetMazeId() string {
	if m != nil {
		return m.MazeId
	}
	return ""
}

func (m *CreateMazeReply) GetEncodedMaze() string {
	if m != nil {
		return m.EncodedMaze
	}
	return ""
}

// MazeConfig is the full config for a maze
type MazeConfig struct {
	Rows                 int64           `protobuf:"varint,1,opt,name=Rows,proto3" json:"Rows,omitempty"`
	Columns              int64           `protobuf:"varint,2,opt,name=Columns,proto3" json:"Columns,omitempty"`
	AllowWeaving         bool            `protobuf:"varint,3,opt,name=AllowWeaving,proto3" json:"AllowWeaving,omitempty"`
	WeavingProbability   float64         `protobuf:"fixed64,4,opt,name=WeavingProbability,proto3" json:"WeavingProbability,omitempty"`
	CellWidth            int64           `protobuf:"varint,5,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`
	WallWidth            int64           `protobuf:"varint,6,opt,name=WallWidth,proto3" json:"WallWidth,omitempty"`
	WallSpace            int64           `protobuf:"varint,7,opt,name=WallSpace,proto3" json:"WallSpace,omitempty"`
	PathWidth            int64           `protobuf:"varint,8,opt,name=PathWidth,proto3" json:"PathWidth,omitempty"`
	ShowDistanceValues   bool            `protobuf:"varint,10,opt,name=ShowDistanceValues,proto3" json:"ShowDistanceValues,omitempty"`
	ShowDistanceColors   bool            `protobuf:"varint,11,opt,name=ShowDistanceColors,proto3" json:"ShowDistanceColors,omitempty"`
	ShowWeightValues     bool            `protobuf:"varint,33,opt,name=ShowWeightValues,proto3" json:"ShowWeightValues,omitempty"`
	SkipGridCheck        bool            `protobuf:"varint,12,opt,name=SkipGridCheck,proto3" json:"SkipGridCheck,omitempty"`
	OrphanMask           []*MazeLocation `protobuf:"bytes,13,rep,name=OrphanMask,proto3" json:"OrphanMask,omitempty"`
	BgColor              string          `protobuf:"bytes,16,opt,name=BgColor,proto3" json:"BgColor,omitempty"`
	BorderColor          string          `protobuf:"bytes,17,opt,name=BorderColor,proto3" json:"BorderColor,omitempty"`
	WallColor            string          `protobuf:"bytes,18,opt,name=WallColor,proto3" json:"WallColor,omitempty"`
	CurrentLocationColor string          `protobuf:"bytes,20,opt,name=CurrentLocationColor,proto3" json:"CurrentLocationColor,omitempty"`
	GenDrawDelay         string          `protobuf:"bytes,25,opt,name=GenDrawDelay,proto3" json:"GenDrawDelay,omitempty"`
	CreateAlgo           string          `protobuf:"bytes,26,opt,name=CreateAlgo,proto3" json:"CreateAlgo,omitempty"`
	BraidProbability     float64         `protobuf:"fixed64,27,opt,name=BraidProbability,proto3" json:"BraidProbability,omitempty"`
	Id                   string          `protobuf:"bytes,28,opt,name=Id,proto3" json:"Id,omitempty"`
	Gui                  bool            `protobuf:"varint,29,opt,name=Gui,proto3" json:"Gui,omitempty"`
	FromFile             string          `protobuf:"bytes,30,opt,name=FromFile,proto3" json:"FromFile,omitempty"`
	ReturnMaze           bool            `protobuf:"varint,31,opt,name=return_maze,json=returnMaze,proto3" json:"return_maze,omitempty"`
	Title                string          `protobuf:"bytes,32,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MazeConfig) Reset()         { *m = MazeConfig{} }
func (m *MazeConfig) String() string { return proto.CompactTextString(m) }
func (*MazeConfig) ProtoMessage()    {}
func (*MazeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{15}
}

func (m *MazeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MazeConfig.Unmarshal(m, b)
}
func (m *MazeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MazeConfig.Marshal(b, m, deterministic)
}
func (m *MazeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MazeConfig.Merge(m, src)
}
func (m *MazeConfig) XXX_Size() int {
	return xxx_messageInfo_MazeConfig.Size(m)
}
func (m *MazeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MazeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MazeConfig proto.InternalMessageInfo

func (m *MazeConfig) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MazeConfig) GetColumns() int64 {
	if m != nil {
		return m.Columns
	}
	return 0
}

func (m *MazeConfig) GetAllowWeaving() bool {
	if m != nil {
		return m.AllowWeaving
	}
	return false
}

func (m *MazeConfig) GetWeavingProbability() float64 {
	if m != nil {
		return m.WeavingProbability
	}
	return 0
}

func (m *MazeConfig) GetCellWidth() int64 {
	if m != nil {
		return m.CellWidth
	}
	return 0
}

func (m *MazeConfig) GetWallWidth() int64 {
	if m != nil {
		return m.WallWidth
	}
	return 0
}

func (m *MazeConfig) GetWallSpace() int64 {
	if m != nil {
		return m.WallSpace
	}
	return 0
}

func (m *MazeConfig) GetPathWidth() int64 {
	if m != nil {
		return m.PathWidth
	}
	return 0
}

func (m *MazeConfig) GetShowDistanceValues() bool {
	if m != nil {
		return m.ShowDistanceValues
	}
	return false
}

func (m *MazeConfig) GetShowDistanceColors() bool {
	if m != nil {
		return m.ShowDistanceColors
	}
	return false
}

func (m *MazeConfig) GetShowWeightValues() bool {
	if m != nil {
		return m.ShowWeightValues
	}
	return false
}

func (m *MazeConfig) GetSkipGridCheck() bool {
	if m != nil {
		return m.SkipGridCheck
	}
	return false
}

func (m *MazeConfig) GetOrphanMask() []*MazeLocation {
	if m != nil {
		return m.OrphanMask
	}
	return nil
}

func (m *MazeConfig) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *MazeConfig) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func (m *MazeConfig) GetWallColor() string {
	if m != nil {
		return m.WallColor
	}
	return ""
}

func (m *MazeConfig) GetCurrentLocationColor() string {
	if m != nil {
		return m.CurrentLocationColor
	}
	return ""
}

func (m *MazeConfig) GetGenDrawDelay() string {
	if m != nil {
		return m.GenDrawDelay
	}
	return ""
}

func (m *MazeConfig) GetCreateAlgo() string {
	if m != nil {
		return m.CreateAlgo
	}
	return ""
}

func (m *MazeConfig) GetBraidProbability() float64 {
	if m != nil {
		return m.BraidProbability
	}
	return 0
}

func (m *MazeConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MazeConfig) GetGui() bool {
	if m != nil {
		return m.Gui
	}
	return false
}

func (m *MazeConfig) GetFromFile() string {
	if m != nil {
		return m.FromFile
	}
	return ""
}

func (m *MazeConfig) GetReturnMaze() bool {
	if m != nil {
		return m.ReturnMaze
	}
	return false
}

func (m *MazeConfig) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// ClientConfig has all the per-client config settings in it
type ClientConfig struct {
	SolveAlgo              string   `protobuf:"bytes,1,opt,name=SolveAlgo,proto3" json:"SolveAlgo,omitempty"`
	DisableDrawOffset      bool     `protobuf:"varint,2,opt,name=DisableDrawOffset,proto3" json:"DisableDrawOffset,omitempty"`
	DrawPathLength         int64    `protobuf:"varint,3,opt,name=DrawPathLength,proto3" json:"DrawPathLength,omitempty"`
	MarkVisitedCells       bool     `protobuf:"varint,9,opt,name=MarkVisitedCells,proto3" json:"MarkVisitedCells,omitempty"`
	NumberMarkVisitedCells bool     `protobuf:"varint,10,opt,name=NumberMarkVisitedCells,proto3" json:"NumberMarkVisitedCells,omitempty"`
	AvatarImage            string   `protobuf:"bytes,14,opt,name=AvatarImage,proto3" json:"AvatarImage,omitempty"`
	VisitedCellColor       string   `protobuf:"bytes,15,opt,name=VisitedCellColor,proto3" json:"VisitedCellColor,omitempty"`
	CurrentLocationColor   string   `protobuf:"bytes,16,opt,name=CurrentLocationColor,proto3" json:"CurrentLocationColor,omitempty"`
	PathColor              string   `protobuf:"bytes,19,opt,name=PathColor,proto3" json:"PathColor,omitempty"`
	FromCellColor          string   `protobuf:"bytes,21,opt,name=FromCellColor,proto3" json:"FromCellColor,omitempty"`
	ToCellColor            string   `protobuf:"bytes,22,opt,name=ToCellColor,proto3" json:"ToCellColor,omitempty"`
	FromCell               string   `protobuf:"bytes,23,opt,name=FromCell,proto3" json:"FromCell,omitempty"`
	ToCell                 string   `protobuf:"bytes,24,opt,name=ToCell,proto3" json:"ToCell,omitempty"`
	ShowFromToColors       bool     `protobuf:"varint,27,opt,name=ShowFromToColors,proto3" json:"ShowFromToColors,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ClientConfig) Reset()         { *m = ClientConfig{} }
func (m *ClientConfig) String() string { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()    {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{16}
}

func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientConfig.Unmarshal(m, b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientConfig.Marshal(b, m, deterministic)
}
func (m *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(m, src)
}
func (m *ClientConfig) XXX_Size() int {
	return xxx_messageInfo_ClientConfig.Size(m)
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *ClientConfig) GetSolveAlgo() string {
	if m != nil {
		return m.SolveAlgo
	}
	return ""
}

func (m *ClientConfig) GetDisableDrawOffset() bool {
	if m != nil {
		return m.DisableDrawOffset
	}
	return false
}

func (m *ClientConfig) GetDrawPathLength() int64 {
	if m != nil {
		return m.DrawPathLength
	}
	return 0
}

func (m *ClientConfig) GetMarkVisitedCells() bool {
	if m != nil {
		return m.MarkVisitedCells
	}
	return false
}

func (m *ClientConfig) GetNumberMarkVisitedCells() bool {
	if m != nil {
		return m.NumberMarkVisitedCells
	}
	return false
}

func (m *ClientConfig) GetAvatarImage() string {
	if m != nil {
		return m.AvatarImage
	}
	return ""
}

func (m *ClientConfig) GetVisitedCellColor() string {
	if m != nil {
		return m.VisitedCellColor
	}
	return ""
}

func (m *ClientConfig) GetCurrentLocationColor() string {
	if m != nil {
		return m.CurrentLocationColor
	}
	return ""
}

func (m *ClientConfig) GetPathColor() string {
	if m != nil {
		return m.PathColor
	}
	return ""
}

func (m *ClientConfig) GetFromCellColor() string {
	if m != nil {
		return m.FromCellColor
	}
	return ""
}

func (m *ClientConfig) GetToCellColor() string {
	if m != nil {
		return m.ToCellColor
	}
	return ""
}

func (m *ClientConfig) GetFromCell() string {
	if m != nil {
		return m.FromCell
	}
	return ""
}

func (m *ClientConfig) GetToCell() string {
	if m != nil {
		return m.ToCell
	}
	return ""
}

func (m *ClientConfig) GetShowFromToColors() bool {
	if m != nil {
		return m.ShowFromToColors
	}
	return false
}

// MazeLocation is a location in the maze
type MazeLocation struct {
	X                    int64    `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z                    int64    `protobuf:"varint,3,opt,name=Z,proto3" json:"Z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MazeLocation) Reset()         { *m = MazeLocation{} }
func (m *MazeLocation) String() string { return proto.CompactTextString(m) }
func (*MazeLocation) ProtoMessage()    {}
func (*MazeLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d29e3fe1edc626, []int{17}
}

func (m *MazeLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MazeLocation.Unmarshal(m, b)
}
func (m *MazeLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MazeLocation.Marshal(b, m, deterministic)
}
func (m *MazeLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MazeLocation.Merge(m, src)
}
func (m *MazeLocation) XXX_Size() int {
	return xxx_messageInfo_MazeLocation.Size(m)
}
func (m *MazeLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_MazeLocation.DiscardUnknown(m)
}

var xxx_messageInfo_MazeLocation proto.InternalMessageInfo

func (m *MazeLocation) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MazeLocation) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MazeLocation) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*ResetClientRequest)(nil), "proto.ResetClientRequest")
	proto.RegisterType((*ResetClientReply)(nil), "proto.ResetClientReply")
	proto.RegisterType((*ExportMazeRequest)(nil), "proto.ExportMazeRequest")
	proto.RegisterType((*ExportMazeReply)(nil), "proto.ExportMazeReply")
	proto.RegisterType((*RegisterClientRequest)(nil), "proto.RegisterClientRequest")
	proto.RegisterType((*RegisterClientReply)(nil), "proto.RegisterClientReply")
	proto.RegisterType((*SolveMazeRequest)(nil), "proto.SolveMazeRequest")
	proto.RegisterType((*SolveMazeResponse)(nil), "proto.SolveMazeResponse")
	proto.RegisterType((*Direction)(nil), "proto.Direction")
	proto.RegisterType((*Maze)(nil), "proto.Maze")
	proto.RegisterType((*Cell)(nil), "proto.Cell")
	proto.RegisterType((*ListMazeRequest)(nil), "proto.ListMazeRequest")
	proto.RegisterType((*ListMazeReply)(nil), "proto.ListMazeReply")
	proto.RegisterType((*CreateMazeRequest)(nil), "proto.CreateMazeRequest")
	proto.RegisterType((*CreateMazeReply)(nil), "proto.CreateMazeReply")
	proto.RegisterType((*MazeConfig)(nil), "proto.MazeConfig")
	proto.RegisterType((*ClientConfig)(nil), "proto.ClientConfig")
	proto.RegisterType((*MazeLocation)(nil), "proto.MazeLocation")
}

func init() { proto.RegisterFile("mazes.proto", fileDescriptor_b6d29e3fe1edc626) }

var fileDescriptor_b6d29e3fe1edc626 = []byte{
	// 1326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdf, 0x6e, 0xdb, 0xb6,
	0x17, 0xae, 0xe2, 0xc4, 0xb1, 0x8f, 0x9d, 0xc4, 0x66, 0xd2, 0x44, 0x75, 0xfb, 0x6b, 0x53, 0xfd,
	0x86, 0x21, 0x1b, 0x8a, 0xae, 0x48, 0x81, 0xad, 0xc3, 0x80, 0xa1, 0x8d, 0xd3, 0x16, 0x19, 0x92,
	0xb5, 0x50, 0x8a, 0xa6, 0xed, 0x8d, 0xc1, 0x48, 0x8c, 0xcd, 0x45, 0x16, 0x3d, 0x52, 0x4e, 0x96,
	0x3e, 0xc0, 0x9e, 0x62, 0x37, 0x7b, 0x81, 0xdd, 0xec, 0x1d, 0xf6, 0x1c, 0x7b, 0x94, 0xe1, 0x90,
	0x94, 0x2c, 0xc9, 0x4e, 0xfa, 0xe7, 0xca, 0x3a, 0xdf, 0xf7, 0x91, 0x3e, 0x3c, 0xff, 0x28, 0x41,
	0x63, 0x48, 0xdf, 0x33, 0x75, 0x7f, 0x24, 0x45, 0x22, 0xc8, 0x82, 0xfe, 0xf1, 0x7e, 0x02, 0xe2,
	0x33, 0xc5, 0x92, 0x6e, 0xc4, 0x59, 0x9c, 0xf8, 0xec, 0xd7, 0x31, 0x53, 0x09, 0xd9, 0x80, 0x45,
	0xd4, 0xf6, 0x78, 0xe8, 0x3a, 0x9b, 0xce, 0x56, 0xdd, 0xaf, 0xa2, 0xb9, 0x17, 0x92, 0x9b, 0x50,
	0x0f, 0xb4, 0x12, 0xa9, 0x39, 0x4d, 0xd5, 0x0c, 0xb0, 0x17, 0x7a, 0xbf, 0x3b, 0xd0, 0x2a, 0x6c,
	0x36, 0x8a, 0x2e, 0x88, 0x0b, 0x8b, 0x6a, 0x1c, 0x04, 0x4c, 0x29, 0xbd, 0x55, 0xcd, 0x4f, 0x4d,
	0x64, 0x86, 0x4c, 0x29, 0xda, 0x67, 0x76, 0xa7, 0xd4, 0x24, 0x3f, 0x42, 0x2b, 0x18, 0x4b, 0x89,
	0x7f, 0x13, 0x89, 0x80, 0x26, 0x5c, 0xc4, 0x6e, 0x65, 0xd3, 0xd9, 0x6a, 0x6c, 0xaf, 0x1a, 0xef,
	0xef, 0x1f, 0xd0, 0xf7, 0x6c, 0xdf, 0x52, 0xfe, 0x8a, 0x15, 0xa7, 0x80, 0x77, 0x0f, 0xda, 0x4f,
	0x7f, 0x1b, 0x09, 0x99, 0xa0, 0xec, 0x43, 0x67, 0xf2, 0x9e, 0xc2, 0x4a, 0x5e, 0xfd, 0x99, 0x4e,
	0x7b, 0xbf, 0xc0, 0x75, 0x9f, 0xf5, 0xb9, 0x4a, 0x98, 0xfc, 0xc8, 0x60, 0x3e, 0x82, 0x25, 0x1b,
	0xcc, 0x40, 0xc4, 0x27, 0xbc, 0xaf, 0x77, 0x9c, 0x9c, 0xd1, 0xec, 0xd2, 0xd5, 0x94, 0xdf, 0x0c,
	0x72, 0x96, 0xf7, 0x8f, 0x03, 0xab, 0xe5, 0x3f, 0xfb, 0xdc, 0x60, 0x17, 0x52, 0x5a, 0x29, 0xa6,
	0x94, 0x3c, 0x80, 0xfa, 0x89, 0x14, 0xc3, 0x5e, 0xc0, 0xa2, 0xc8, 0x9d, 0xbf, 0x3c, 0x05, 0x35,
	0x54, 0x75, 0x59, 0x14, 0x91, 0x7b, 0xb0, 0x98, 0x08, 0xa3, 0x5f, 0xb8, 0x5c, 0x5f, 0x4d, 0x04,
	0xaa, 0xbd, 0x3f, 0x1c, 0x68, 0x1d, 0x8a, 0xe8, 0x8c, 0xe5, 0x33, 0xb5, 0x0e, 0x36, 0x42, 0x9f,
	0x50, 0x7c, 0xe4, 0x16, 0xd4, 0x43, 0x2e, 0x59, 0x90, 0x15, 0x4b, 0xdd, 0x9f, 0x00, 0x78, 0x7c,
	0x1e, 0xf3, 0x84, 0x53, 0x73, 0x8a, 0x9a, 0x9f, 0x9a, 0xb8, 0xe9, 0x50, 0x9c, 0xb1, 0xde, 0x31,
	0x0d, 0x4e, 0xb5, 0xc7, 0x35, 0xbf, 0x86, 0xc0, 0x0e, 0x0d, 0x4e, 0xbd, 0xbf, 0x2b, 0xd0, 0xce,
	0xb9, 0xa7, 0x46, 0x22, 0x56, 0xec, 0xf3, 0xba, 0x83, 0x74, 0x61, 0x8d, 0x9e, 0x51, 0x1e, 0xd1,
	0xe3, 0x88, 0xf5, 0x32, 0xcf, 0x94, 0x5b, 0xd9, 0xac, 0x6c, 0x35, 0xb6, 0x5b, 0x36, 0x4a, 0xbb,
	0x29, 0xe1, 0xaf, 0x66, 0xea, 0x0c, 0x53, 0x57, 0x9c, 0x63, 0x0d, 0x16, 0x98, 0x94, 0x42, 0xda,
	0x33, 0x18, 0x83, 0xfc, 0x1f, 0x96, 0xf4, 0x43, 0x2f, 0x4d, 0x7e, 0x55, 0x7b, 0xd5, 0xd4, 0xe0,
	0xc1, 0x15, 0xed, 0xb6, 0xf8, 0xf1, 0xed, 0x56, 0x2c, 0x92, 0xda, 0x27, 0x16, 0x49, 0xfd, 0x83,
	0x45, 0x82, 0xf5, 0xa0, 0x30, 0x09, 0xa1, 0x0b, 0xfa, 0x6c, 0xd6, 0x42, 0x5c, 0xb2, 0x73, 0x2a,
	0x43, 0xb7, 0xb1, 0xe9, 0x6c, 0x39, 0xbe, 0xb5, 0xbc, 0xef, 0xa1, 0x9e, 0x85, 0x8c, 0x10, 0x98,
	0x8f, 0xe9, 0x90, 0xd9, 0x4c, 0xe9, 0x67, 0x8c, 0xe2, 0x19, 0x57, 0x3c, 0x61, 0x26, 0x4b, 0x35,
	0x3f, 0x35, 0xbd, 0x1e, 0xcc, 0xa3, 0x0b, 0x97, 0x96, 0xe0, 0x5d, 0x58, 0x40, 0xaf, 0x95, 0x3b,
	0xa7, 0xb3, 0xd6, 0x48, 0x5b, 0x95, 0x45, 0x91, 0x6f, 0x18, 0x2c, 0xc4, 0x34, 0xe7, 0x26, 0xb9,
	0x75, 0x7f, 0x02, 0x78, 0xdf, 0xc1, 0xbc, 0x3e, 0xd3, 0x37, 0x50, 0xcb, 0x62, 0xed, 0x5c, 0x11,
	0xb2, 0x54, 0xe4, 0xb5, 0x61, 0x65, 0x9f, 0xab, 0xfc, 0x44, 0xf3, 0xb6, 0x61, 0x69, 0x02, 0x61,
	0xfb, 0xdf, 0x85, 0x05, 0x3d, 0xe2, 0x5d, 0xa7, 0xe0, 0x9d, 0x16, 0x18, 0xc6, 0xeb, 0x41, 0xbb,
	0x2b, 0x19, 0x4d, 0x0a, 0x0d, 0xf7, 0x15, 0x54, 0xed, 0x04, 0x32, 0xae, 0xb4, 0x73, 0x0b, 0xed,
	0xfc, 0xb1, 0x02, 0x72, 0x07, 0x1a, 0x92, 0x25, 0x63, 0x19, 0xf7, 0x70, 0x3f, 0x1b, 0x3e, 0x30,
	0x10, 0xca, 0xbd, 0x7d, 0x58, 0xc9, 0xff, 0x01, 0xba, 0xb5, 0x0e, 0xd5, 0x83, 0x42, 0x30, 0x0f,
	0xd2, 0x60, 0x36, 0x59, 0x1c, 0x88, 0x90, 0x85, 0x93, 0xcd, 0xea, 0x7e, 0xc3, 0x62, 0x7a, 0xb7,
	0x7f, 0xab, 0x00, 0x13, 0x2f, 0x30, 0x99, 0xbe, 0x38, 0x37, 0xc3, 0xad, 0xe2, 0xeb, 0x67, 0x4c,
	0x66, 0x57, 0x44, 0xe3, 0x61, 0xac, 0xf4, 0x06, 0x15, 0x3f, 0x35, 0x89, 0x07, 0xcd, 0x27, 0x51,
	0x24, 0xce, 0x8f, 0x18, 0x3d, 0xe3, 0x71, 0x5f, 0x4f, 0x85, 0x9a, 0x5f, 0xc0, 0xc8, 0x7d, 0x20,
	0xf6, 0xf1, 0xa5, 0x14, 0xc7, 0xf4, 0x98, 0x47, 0x3c, 0xb9, 0xd0, 0xbd, 0xe5, 0xf8, 0x33, 0x18,
	0xcc, 0x2e, 0xe6, 0xef, 0x88, 0x87, 0xc9, 0x40, 0xb7, 0x5a, 0xc5, 0x9f, 0x00, 0xc8, 0x1e, 0xd1,
	0x94, 0xad, 0x1a, 0x36, 0x03, 0x52, 0xf6, 0x70, 0x44, 0x03, 0xa6, 0x1b, 0xcc, 0xb2, 0x1a, 0x40,
	0xf6, 0x25, 0x4d, 0x06, 0x66, 0x6d, 0xcd, 0xb0, 0x19, 0x80, 0x7e, 0x1e, 0x0e, 0xc4, 0xf9, 0x2e,
	0x57, 0x09, 0x8d, 0x03, 0xf6, 0x9a, 0x46, 0x63, 0xa6, 0x6c, 0x3f, 0xcc, 0x60, 0xca, 0xfa, 0xae,
	0x88, 0x84, 0x54, 0xba, 0x4f, 0x4a, 0x7a, 0xc3, 0x90, 0xaf, 0xa1, 0x85, 0xe8, 0x11, 0xe3, 0xfd,
	0x41, 0x62, 0x77, 0xbf, 0xab, 0xd5, 0x53, 0x38, 0xf9, 0x02, 0x96, 0x0e, 0x4f, 0xf9, 0xe8, 0xb9,
	0xe4, 0x61, 0x77, 0xc0, 0x82, 0x53, 0xb7, 0xa9, 0x85, 0x45, 0x90, 0x3c, 0x04, 0x78, 0x21, 0x47,
	0x03, 0x1a, 0x1f, 0x50, 0x75, 0xea, 0x2e, 0xe9, 0x8a, 0x9c, 0x59, 0xe3, 0x39, 0x19, 0x26, 0x73,
	0xa7, 0xaf, 0x5d, 0x72, 0x5b, 0xe6, 0x9a, 0xb2, 0x26, 0xd9, 0x84, 0xc6, 0x8e, 0x90, 0x21, 0x93,
	0x86, 0x6d, 0x9b, 0x5a, 0xc9, 0x41, 0x69, 0x78, 0x0d, 0x4f, 0xcc, 0x0d, 0x90, 0x01, 0x64, 0x1b,
	0xd6, 0xba, 0xc5, 0xb9, 0x65, 0x84, 0x6b, 0x5a, 0x38, 0x93, 0xc3, 0x02, 0x7a, 0xce, 0xe2, 0x5d,
	0x49, 0xcf, 0x77, 0x59, 0x44, 0x2f, 0xdc, 0x1b, 0x66, 0x78, 0xe6, 0x31, 0x72, 0x1b, 0xc0, 0xd4,
	0xfb, 0x93, 0xa8, 0x2f, 0xdc, 0x8e, 0x56, 0xe4, 0x10, 0x0c, 0xec, 0x8e, 0xa4, 0x3c, 0xcc, 0x97,
	0xd7, 0x4d, 0x5d, 0x5e, 0x53, 0x38, 0x59, 0x86, 0xb9, 0xbd, 0xd0, 0xbd, 0xa5, 0xf7, 0x98, 0xdb,
	0x0b, 0x49, 0x0b, 0x2a, 0xcf, 0xc7, 0xdc, 0xfd, 0x9f, 0x0e, 0x2f, 0x3e, 0x92, 0x0e, 0xd4, 0x9e,
	0x49, 0x31, 0x7c, 0xc6, 0x23, 0xe6, 0xde, 0x36, 0x17, 0x4c, 0x6a, 0x97, 0x5b, 0xf3, 0x4e, 0xb9,
	0x35, 0xf1, 0x8a, 0x48, 0x78, 0x12, 0x31, 0x77, 0x53, 0xaf, 0x34, 0x86, 0xf7, 0xd7, 0x3c, 0x34,
	0xf3, 0xaf, 0x1a, 0x18, 0x47, 0x7d, 0xe7, 0xe9, 0x03, 0x99, 0x8e, 0x9d, 0x00, 0xe4, 0x1e, 0xb4,
	0x77, 0xb9, 0xd2, 0xd7, 0x92, 0xa4, 0xe7, 0x2f, 0x4e, 0x4e, 0x14, 0x4b, 0xec, 0x18, 0x98, 0x26,
	0xc8, 0x97, 0xb0, 0x8c, 0x16, 0xd6, 0xf1, 0x3e, 0x8b, 0xfb, 0xc9, 0x40, 0x37, 0x61, 0xc5, 0x2f,
	0xa1, 0x18, 0xa5, 0x03, 0x2a, 0x4f, 0x5f, 0x9b, 0x31, 0xdc, 0xd5, 0x23, 0xb6, 0x6e, 0xca, 0xaf,
	0x8c, 0x93, 0x6f, 0x61, 0xfd, 0xe7, 0xf1, 0xf0, 0x98, 0xc9, 0xa9, 0x15, 0xa6, 0x1d, 0x2e, 0x61,
	0xb1, 0x82, 0x9e, 0x9c, 0xd1, 0x84, 0xca, 0xbd, 0x21, 0xde, 0x84, 0xcb, 0xa6, 0x82, 0x72, 0x10,
	0x7a, 0x91, 0x5b, 0x61, 0xea, 0x63, 0x45, 0xcb, 0xa6, 0xf0, 0x4b, 0xeb, 0xa9, 0x75, 0x45, 0x3d,
	0xd9, 0x16, 0x37, 0xc2, 0x55, 0x13, 0xd9, 0x0c, 0xc0, 0xb6, 0x7a, 0x66, 0x2f, 0x48, 0xa3, 0xb8,
	0xae, 0x15, 0x45, 0x10, 0x4f, 0xf1, 0x4a, 0x4c, 0x34, 0xeb, 0xe6, 0x14, 0x39, 0x28, 0xad, 0x11,
	0x04, 0xdc, 0x8d, 0x49, 0x8d, 0xa4, 0x57, 0xa9, 0x91, 0xba, 0xae, 0x19, 0xc5, 0xc6, 0x4a, 0xdb,
	0x1f, 0x75, 0xaf, 0x84, 0x1d, 0x16, 0x37, 0x27, 0xed, 0x9f, 0xc7, 0xbd, 0x47, 0xd0, 0xcc, 0xf7,
	0x2f, 0x69, 0x82, 0xf3, 0xc6, 0x4e, 0x64, 0xe7, 0x0d, 0x5a, 0x6f, 0xed, 0x20, 0x76, 0xde, 0xa2,
	0xf5, 0xce, 0xa6, 0xdc, 0x79, 0xb7, 0xfd, 0x67, 0x05, 0x16, 0x70, 0xa9, 0x24, 0x8f, 0xd3, 0xae,
	0xd1, 0x85, 0xe9, 0xa6, 0xd7, 0x68, 0xf9, 0x66, 0xea, 0xac, 0xcf, 0x60, 0x46, 0xd1, 0x85, 0x77,
	0x8d, 0xfc, 0x00, 0xf5, 0xf4, 0xf2, 0x53, 0x24, 0x95, 0x95, 0x6e, 0xc8, 0xce, 0xda, 0x14, 0x6e,
	0x16, 0xef, 0xda, 0x12, 0xd7, 0xff, 0xbe, 0x61, 0x45, 0xe5, 0xf7, 0xd0, 0x8e, 0x3b, 0x4d, 0x98,
	0x37, 0x40, 0xef, 0xda, 0x96, 0xf3, 0xc0, 0x21, 0xfb, 0xb0, 0x5c, 0x7c, 0x09, 0x27, 0xb7, 0xec,
	0x8a, 0x99, 0x1f, 0x02, 0x9d, 0xce, 0x25, 0xac, 0xf1, 0xa9, 0x0b, 0x8d, 0xdc, 0xc7, 0x13, 0xb9,
	0x91, 0x89, 0xcb, 0x5f, 0x67, 0x9d, 0x8d, 0x59, 0x94, 0xd9, 0xe4, 0x31, 0xc0, 0xe4, 0x5b, 0x26,
	0x8b, 0xeb, 0xd4, 0xc7, 0x50, 0x16, 0xd7, 0xd2, 0x87, 0x8f, 0x77, 0xed, 0xb8, 0xaa, 0x89, 0x87,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x2e, 0x46, 0xcb, 0x2d, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MazerClient is the client API for Mazer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MazerClient interface {
	// Create maze
	CreateMaze(ctx context.Context, in *CreateMazeRequest, opts ...grpc.CallOption) (*CreateMazeReply, error)
	// List available mazes
	ListMazes(ctx context.Context, in *ListMazeRequest, opts ...grpc.CallOption) (*ListMazeReply, error)
	// Solve a maze, streaming, bidi
	SolveMaze(ctx context.Context, opts ...grpc.CallOption) (Mazer_SolveMazeClient, error)
	// Register new client with an existing maze
	RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientReply, error)
	// Reset existing client in an existing maze
	ResetClient(ctx context.Context, in *ResetClientRequest, opts ...grpc.CallOption) (*ResetClientReply, error)
	// Export a maze,
	ExportMaze(ctx context.Context, in *ExportMazeRequest, opts ...grpc.CallOption) (*ExportMazeReply, error)
}

type mazerClient struct {
	cc *grpc.ClientConn
}

func NewMazerClient(cc *grpc.ClientConn) MazerClient {
	return &mazerClient{cc}
}

func (c *mazerClient) CreateMaze(ctx context.Context, in *CreateMazeRequest, opts ...grpc.CallOption) (*CreateMazeReply, error) {
	out := new(CreateMazeReply)
	err := c.cc.Invoke(ctx, "/proto.Mazer/CreateMaze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mazerClient) ListMazes(ctx context.Context, in *ListMazeRequest, opts ...grpc.CallOption) (*ListMazeReply, error) {
	out := new(ListMazeReply)
	err := c.cc.Invoke(ctx, "/proto.Mazer/ListMazes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mazerClient) SolveMaze(ctx context.Context, opts ...grpc.CallOption) (Mazer_SolveMazeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mazer_serviceDesc.Streams[0], "/proto.Mazer/SolveMaze", opts...)
	if err != nil {
		return nil, err
	}
	x := &mazerSolveMazeClient{stream}
	return x, nil
}

type Mazer_SolveMazeClient interface {
	Send(*SolveMazeRequest) error
	Recv() (*SolveMazeResponse, error)
	grpc.ClientStream
}

type mazerSolveMazeClient struct {
	grpc.ClientStream
}

func (x *mazerSolveMazeClient) Send(m *SolveMazeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mazerSolveMazeClient) Recv() (*SolveMazeResponse, error) {
	m := new(SolveMazeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mazerClient) RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientReply, error) {
	out := new(RegisterClientReply)
	err := c.cc.Invoke(ctx, "/proto.Mazer/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mazerClient) ResetClient(ctx context.Context, in *ResetClientRequest, opts ...grpc.CallOption) (*ResetClientReply, error) {
	out := new(ResetClientReply)
	err := c.cc.Invoke(ctx, "/proto.Mazer/ResetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mazerClient) ExportMaze(ctx context.Context, in *ExportMazeRequest, opts ...grpc.CallOption) (*ExportMazeReply, error) {
	out := new(ExportMazeReply)
	err := c.cc.Invoke(ctx, "/proto.Mazer/ExportMaze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MazerServer is the server API for Mazer service.
type MazerServer interface {
	// Create maze
	CreateMaze(context.Context, *CreateMazeRequest) (*CreateMazeReply, error)
	// List available mazes
	ListMazes(context.Context, *ListMazeRequest) (*ListMazeReply, error)
	// Solve a maze, streaming, bidi
	SolveMaze(Mazer_SolveMazeServer) error
	// Register new client with an existing maze
	RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientReply, error)
	// Reset existing client in an existing maze
	ResetClient(context.Context, *ResetClientRequest) (*ResetClientReply, error)
	// Export a maze,
	ExportMaze(context.Context, *ExportMazeRequest) (*ExportMazeReply, error)
}

func RegisterMazerServer(s *grpc.Server, srv MazerServer) {
	s.RegisterService(&_Mazer_serviceDesc, srv)
}

func _Mazer_CreateMaze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMazeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MazerServer).CreateMaze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mazer/CreateMaze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MazerServer).CreateMaze(ctx, req.(*CreateMazeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mazer_ListMazes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMazeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MazerServer).ListMazes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mazer/ListMazes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MazerServer).ListMazes(ctx, req.(*ListMazeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mazer_SolveMaze_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MazerServer).SolveMaze(&mazerSolveMazeServer{stream})
}

type Mazer_SolveMazeServer interface {
	Send(*SolveMazeResponse) error
	Recv() (*SolveMazeRequest, error)
	grpc.ServerStream
}

type mazerSolveMazeServer struct {
	grpc.ServerStream
}

func (x *mazerSolveMazeServer) Send(m *SolveMazeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mazerSolveMazeServer) Recv() (*SolveMazeRequest, error) {
	m := new(SolveMazeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mazer_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MazerServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mazer/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MazerServer).RegisterClient(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mazer_ResetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MazerServer).ResetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mazer/ResetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MazerServer).ResetClient(ctx, req.(*ResetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mazer_ExportMaze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportMazeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MazerServer).ExportMaze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mazer/ExportMaze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MazerServer).ExportMaze(ctx, req.(*ExportMazeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mazer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mazer",
	HandlerType: (*MazerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMaze",
			Handler:    _Mazer_CreateMaze_Handler,
		},
		{
			MethodName: "ListMazes",
			Handler:    _Mazer_ListMazes_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _Mazer_RegisterClient_Handler,
		},
		{
			MethodName: "ResetClient",
			Handler:    _Mazer_ResetClient_Handler,
		},
		{
			MethodName: "ExportMaze",
			Handler:    _Mazer_ExportMaze_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SolveMaze",
			Handler:       _Mazer_SolveMaze_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mazes.proto",
}
