// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mazes.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	mazes.proto

It has these top-level messages:
	ShowMazeRequest
	ShowMazeReply
	MazeConfig
	Cell
	MazeLocation
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ShowMazeRequest struct {
	Config *MazeConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *ShowMazeRequest) Reset()                    { *m = ShowMazeRequest{} }
func (m *ShowMazeRequest) String() string            { return proto1.CompactTextString(m) }
func (*ShowMazeRequest) ProtoMessage()               {}
func (*ShowMazeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ShowMazeRequest) GetConfig() *MazeConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ShowMazeReply struct {
}

func (m *ShowMazeReply) Reset()                    { *m = ShowMazeReply{} }
func (m *ShowMazeReply) String() string            { return proto1.CompactTextString(m) }
func (*ShowMazeReply) ProtoMessage()               {}
func (*ShowMazeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// MazeConfig is the full config for a maze
type MazeConfig struct {
	Rows                 int64           `protobuf:"varint,1,opt,name=Rows" json:"Rows,omitempty"`
	Columns              int64           `protobuf:"varint,2,opt,name=Columns" json:"Columns,omitempty"`
	AllowWeaving         bool            `protobuf:"varint,3,opt,name=AllowWeaving" json:"AllowWeaving,omitempty"`
	WeavingProbability   float64         `protobuf:"fixed64,4,opt,name=WeavingProbability" json:"WeavingProbability,omitempty"`
	CellWidth            int64           `protobuf:"varint,5,opt,name=CellWidth" json:"CellWidth,omitempty"`
	WallWidth            int64           `protobuf:"varint,6,opt,name=WallWidth" json:"WallWidth,omitempty"`
	WallSpace            int64           `protobuf:"varint,7,opt,name=WallSpace" json:"WallSpace,omitempty"`
	PathWidth            int64           `protobuf:"varint,8,opt,name=PathWidth" json:"PathWidth,omitempty"`
	MarkVisitedCells     bool            `protobuf:"varint,9,opt,name=MarkVisitedCells" json:"MarkVisitedCells,omitempty"`
	ShowDistanceValues   bool            `protobuf:"varint,10,opt,name=ShowDistanceValues" json:"ShowDistanceValues,omitempty"`
	ShowDistanceColors   bool            `protobuf:"varint,11,opt,name=ShowDistanceColors" json:"ShowDistanceColors,omitempty"`
	SkipGridCheck        bool            `protobuf:"varint,12,opt,name=SkipGridCheck" json:"SkipGridCheck,omitempty"`
	OrphanMask           []*MazeLocation `protobuf:"bytes,13,rep,name=OrphanMask" json:"OrphanMask,omitempty"`
	AvatarImage          string          `protobuf:"bytes,14,opt,name=AvatarImage" json:"AvatarImage,omitempty"`
	VisitedCellColor     string          `protobuf:"bytes,15,opt,name=VisitedCellColor" json:"VisitedCellColor,omitempty"`
	BgColor              string          `protobuf:"bytes,16,opt,name=BgColor" json:"BgColor,omitempty"`
	BorderColor          string          `protobuf:"bytes,17,opt,name=BorderColor" json:"BorderColor,omitempty"`
	WallColor            string          `protobuf:"bytes,18,opt,name=WallColor" json:"WallColor,omitempty"`
	PathColor            string          `protobuf:"bytes,19,opt,name=PathColor" json:"PathColor,omitempty"`
	CurrentLocationColor string          `protobuf:"bytes,20,opt,name=CurrentLocationColor" json:"CurrentLocationColor,omitempty"`
	FromCellColor        string          `protobuf:"bytes,21,opt,name=FromCellColor" json:"FromCellColor,omitempty"`
	ToCellColor          string          `protobuf:"bytes,22,opt,name=ToCellColor" json:"ToCellColor,omitempty"`
	FromCell             string          `protobuf:"bytes,23,opt,name=FromCell" json:"FromCell,omitempty"`
	ToCell               string          `protobuf:"bytes,24,opt,name=ToCell" json:"ToCell,omitempty"`
	GenDrawDelay         string          `protobuf:"bytes,25,opt,name=GenDrawDelay" json:"GenDrawDelay,omitempty"`
}

func (m *MazeConfig) Reset()                    { *m = MazeConfig{} }
func (m *MazeConfig) String() string            { return proto1.CompactTextString(m) }
func (*MazeConfig) ProtoMessage()               {}
func (*MazeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MazeConfig) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MazeConfig) GetColumns() int64 {
	if m != nil {
		return m.Columns
	}
	return 0
}

func (m *MazeConfig) GetAllowWeaving() bool {
	if m != nil {
		return m.AllowWeaving
	}
	return false
}

func (m *MazeConfig) GetWeavingProbability() float64 {
	if m != nil {
		return m.WeavingProbability
	}
	return 0
}

func (m *MazeConfig) GetCellWidth() int64 {
	if m != nil {
		return m.CellWidth
	}
	return 0
}

func (m *MazeConfig) GetWallWidth() int64 {
	if m != nil {
		return m.WallWidth
	}
	return 0
}

func (m *MazeConfig) GetWallSpace() int64 {
	if m != nil {
		return m.WallSpace
	}
	return 0
}

func (m *MazeConfig) GetPathWidth() int64 {
	if m != nil {
		return m.PathWidth
	}
	return 0
}

func (m *MazeConfig) GetMarkVisitedCells() bool {
	if m != nil {
		return m.MarkVisitedCells
	}
	return false
}

func (m *MazeConfig) GetShowDistanceValues() bool {
	if m != nil {
		return m.ShowDistanceValues
	}
	return false
}

func (m *MazeConfig) GetShowDistanceColors() bool {
	if m != nil {
		return m.ShowDistanceColors
	}
	return false
}

func (m *MazeConfig) GetSkipGridCheck() bool {
	if m != nil {
		return m.SkipGridCheck
	}
	return false
}

func (m *MazeConfig) GetOrphanMask() []*MazeLocation {
	if m != nil {
		return m.OrphanMask
	}
	return nil
}

func (m *MazeConfig) GetAvatarImage() string {
	if m != nil {
		return m.AvatarImage
	}
	return ""
}

func (m *MazeConfig) GetVisitedCellColor() string {
	if m != nil {
		return m.VisitedCellColor
	}
	return ""
}

func (m *MazeConfig) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *MazeConfig) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func (m *MazeConfig) GetWallColor() string {
	if m != nil {
		return m.WallColor
	}
	return ""
}

func (m *MazeConfig) GetPathColor() string {
	if m != nil {
		return m.PathColor
	}
	return ""
}

func (m *MazeConfig) GetCurrentLocationColor() string {
	if m != nil {
		return m.CurrentLocationColor
	}
	return ""
}

func (m *MazeConfig) GetFromCellColor() string {
	if m != nil {
		return m.FromCellColor
	}
	return ""
}

func (m *MazeConfig) GetToCellColor() string {
	if m != nil {
		return m.ToCellColor
	}
	return ""
}

func (m *MazeConfig) GetFromCell() string {
	if m != nil {
		return m.FromCell
	}
	return ""
}

func (m *MazeConfig) GetToCell() string {
	if m != nil {
		return m.ToCell
	}
	return ""
}

func (m *MazeConfig) GetGenDrawDelay() string {
	if m != nil {
		return m.GenDrawDelay
	}
	return ""
}

type Cell struct {
}

func (m *Cell) Reset()                    { *m = Cell{} }
func (m *Cell) String() string            { return proto1.CompactTextString(m) }
func (*Cell) ProtoMessage()               {}
func (*Cell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// MazeLocation is a location in the maze
type MazeLocation struct {
	X int64 `protobuf:"varint,1,opt,name=X" json:"X,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=Y" json:"Y,omitempty"`
	Z int64 `protobuf:"varint,3,opt,name=Z" json:"Z,omitempty"`
}

func (m *MazeLocation) Reset()                    { *m = MazeLocation{} }
func (m *MazeLocation) String() string            { return proto1.CompactTextString(m) }
func (*MazeLocation) ProtoMessage()               {}
func (*MazeLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MazeLocation) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MazeLocation) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MazeLocation) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto1.RegisterType((*ShowMazeRequest)(nil), "proto.ShowMazeRequest")
	proto1.RegisterType((*ShowMazeReply)(nil), "proto.ShowMazeReply")
	proto1.RegisterType((*MazeConfig)(nil), "proto.MazeConfig")
	proto1.RegisterType((*Cell)(nil), "proto.Cell")
	proto1.RegisterType((*MazeLocation)(nil), "proto.MazeLocation")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mazer service

type MazerClient interface {
	// Display maze
	ShowMaze(ctx context.Context, in *ShowMazeRequest, opts ...grpc.CallOption) (*ShowMazeReply, error)
}

type mazerClient struct {
	cc *grpc.ClientConn
}

func NewMazerClient(cc *grpc.ClientConn) MazerClient {
	return &mazerClient{cc}
}

func (c *mazerClient) ShowMaze(ctx context.Context, in *ShowMazeRequest, opts ...grpc.CallOption) (*ShowMazeReply, error) {
	out := new(ShowMazeReply)
	err := grpc.Invoke(ctx, "/proto.Mazer/ShowMaze", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mazer service

type MazerServer interface {
	// Display maze
	ShowMaze(context.Context, *ShowMazeRequest) (*ShowMazeReply, error)
}

func RegisterMazerServer(s *grpc.Server, srv MazerServer) {
	s.RegisterService(&_Mazer_serviceDesc, srv)
}

func _Mazer_ShowMaze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMazeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MazerServer).ShowMaze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mazer/ShowMaze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MazerServer).ShowMaze(ctx, req.(*ShowMazeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mazer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mazer",
	HandlerType: (*MazerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowMaze",
			Handler:    _Mazer_ShowMaze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mazes.proto",
}

func init() { proto1.RegisterFile("mazes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xcf, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0x97, 0x51, 0x7e, 0x3d, 0x60, 0xb4, 0x2e, 0x63, 0x5e, 0xb5, 0x43, 0x14, 0xed, 0xc0,
	0x76, 0xe0, 0x40, 0x2f, 0xd3, 0xb4, 0x4b, 0x1b, 0xb4, 0x6a, 0xd2, 0xd0, 0xaa, 0x30, 0x95, 0xb6,
	0x37, 0x03, 0x1e, 0x58, 0x84, 0x98, 0x39, 0xa6, 0x88, 0xfe, 0x03, 0xfb, 0xb7, 0x27, 0x3f, 0x27,
	0x24, 0x14, 0x4e, 0xe4, 0x7d, 0x3e, 0x5f, 0xe3, 0x5f, 0x79, 0x81, 0xda, 0x92, 0x3d, 0xf3, 0xb8,
	0xbb, 0x52, 0x52, 0x4b, 0x52, 0xc4, 0x1f, 0xef, 0x1b, 0x34, 0x87, 0x73, 0xb9, 0x19, 0xb0, 0x67,
	0x1e, 0xf0, 0xbf, 0x6b, 0x1e, 0x6b, 0xf2, 0x09, 0x4a, 0x13, 0x19, 0xfd, 0x11, 0x33, 0xea, 0xb8,
	0x4e, 0xa7, 0xd6, 0x3b, 0xb3, 0x23, 0xba, 0x26, 0xe3, 0xa3, 0x08, 0x92, 0x80, 0xd7, 0x84, 0x46,
	0x36, 0x7a, 0x15, 0x6e, 0xbd, 0x7f, 0x65, 0x80, 0x2c, 0x47, 0x08, 0x9c, 0x04, 0x72, 0x13, 0xe3,
	0x1f, 0x15, 0x02, 0x7c, 0x26, 0x14, 0xca, 0xbe, 0x0c, 0xd7, 0xcb, 0x28, 0xa6, 0xaf, 0x11, 0xa7,
	0x25, 0xf1, 0xa0, 0x7e, 0x15, 0x86, 0x72, 0x33, 0xe2, 0xec, 0x49, 0x44, 0x33, 0x5a, 0x70, 0x9d,
	0x4e, 0x25, 0xd8, 0x63, 0xa4, 0x0b, 0x24, 0x79, 0xbc, 0x55, 0x72, 0xcc, 0xc6, 0x22, 0x14, 0x7a,
	0x4b, 0x4f, 0x5c, 0xa7, 0xe3, 0x04, 0x47, 0x0c, 0xf9, 0x00, 0x55, 0x9f, 0x87, 0xe1, 0x48, 0x4c,
	0xf5, 0x9c, 0x16, 0x71, 0xbe, 0x0c, 0x18, 0x3b, 0x62, 0xa9, 0x2d, 0x59, 0xbb, 0x03, 0xa9, 0x1d,
	0xae, 0xd8, 0x84, 0xd3, 0x72, 0x66, 0x11, 0x18, 0x7b, 0xcb, 0xf4, 0xdc, 0x8e, 0xad, 0x58, 0xbb,
	0x03, 0xe4, 0x33, 0x9c, 0x0e, 0x98, 0x5a, 0xdc, 0x89, 0x58, 0x68, 0x3e, 0x35, 0x33, 0xc6, 0xb4,
	0x8a, 0xfb, 0x39, 0xe0, 0x66, 0x4f, 0xe6, 0x14, 0xfb, 0x22, 0xd6, 0x2c, 0x9a, 0xf0, 0x3b, 0x16,
	0xae, 0x79, 0x4c, 0x01, 0xd3, 0x47, 0xcc, 0xcb, 0xbc, 0x2f, 0x43, 0xa9, 0x62, 0x5a, 0x3b, 0xcc,
	0x5b, 0x43, 0x3e, 0x42, 0x63, 0xb8, 0x10, 0xab, 0x1b, 0x25, 0xa6, 0xfe, 0x9c, 0x4f, 0x16, 0xb4,
	0x8e, 0xd1, 0x7d, 0x48, 0x2e, 0x01, 0x7e, 0xa9, 0xd5, 0x9c, 0x45, 0x03, 0x16, 0x2f, 0x68, 0xc3,
	0x2d, 0x74, 0x6a, 0xbd, 0xf3, 0xdc, 0xd5, 0xff, 0x94, 0x13, 0xa6, 0x85, 0x8c, 0x82, 0x5c, 0x8c,
	0xb8, 0x50, 0xbb, 0x7a, 0x62, 0x9a, 0xa9, 0x1f, 0x4b, 0x36, 0xe3, 0xf4, 0x8d, 0xeb, 0x74, 0xaa,
	0x41, 0x1e, 0x99, 0x83, 0xc8, 0x6d, 0x16, 0x57, 0x44, 0x9b, 0x18, 0x3b, 0xe0, 0xe6, 0xd5, 0xb8,
	0x9e, 0xd9, 0xc8, 0x29, 0x46, 0xd2, 0xd2, 0xcc, 0x73, 0x2d, 0xd5, 0x94, 0x2b, 0x6b, 0xcf, 0xec,
	0x3c, 0x39, 0x94, 0x5e, 0x96, 0xf5, 0x04, 0x7d, 0x06, 0xd2, 0xcb, 0xb2, 0xf6, 0xdc, 0xda, 0x1d,
	0x20, 0x3d, 0x68, 0xf9, 0x6b, 0xa5, 0x78, 0xa4, 0xd3, 0x4d, 0xda, 0x60, 0x0b, 0x83, 0x47, 0x9d,
	0x39, 0xd4, 0xef, 0x4a, 0x2e, 0xb3, 0x4d, 0xbd, 0xc5, 0xf0, 0x3e, 0x34, 0xeb, 0xfe, 0x2d, 0xb3,
	0x4c, 0xdb, 0xae, 0x3b, 0x87, 0xc8, 0x05, 0x54, 0xd2, 0x21, 0xf4, 0x1d, 0xea, 0x5d, 0x4d, 0xda,
	0x50, 0xb2, 0x51, 0x4a, 0xd1, 0x24, 0x95, 0x69, 0x94, 0x1b, 0x1e, 0xf5, 0x15, 0xdb, 0xf4, 0x79,
	0xc8, 0xb6, 0xf4, 0x3d, 0xda, 0x3d, 0xe6, 0x95, 0xe0, 0xc4, 0x64, 0xbd, 0x2f, 0x50, 0xcf, 0xdf,
	0x1e, 0xa9, 0x83, 0x73, 0x9f, 0xf4, 0xa3, 0x73, 0x6f, 0xaa, 0x87, 0xa4, 0x0d, 0x9d, 0x07, 0x53,
	0x3d, 0x62, 0xd7, 0x15, 0x02, 0xe7, 0xb1, 0xe7, 0x43, 0xd1, 0x8c, 0x54, 0xe4, 0x2b, 0x54, 0xd2,
	0x2e, 0x27, 0xed, 0xe4, 0x8d, 0x78, 0xf1, 0xd1, 0xb8, 0x68, 0x1d, 0x70, 0xf3, 0x39, 0x78, 0x35,
	0x2e, 0x21, 0xbe, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x70, 0x5e, 0x57, 0x3d, 0x7c, 0x04, 0x00,
	0x00,
}
