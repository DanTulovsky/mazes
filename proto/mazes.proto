syntax = "proto3";

package proto;

// The greeting service definition.
service Mazer {
    // Create maze
    rpc CreateMaze(CreateMazeRequest) returns (CreateMazeReply) {}

    // List available mazes
    rpc ListMazes(ListMazeRequest) returns (ListMazeReply) {}

    // Solve a maze, streaming, bidi
    rpc SolveMaze(stream SolveMazeRequest) returns (stream SolveMazeResponse) {}

    // Register new client with an existing maze
    rpc RegisterClient(RegisterClientRequest) returns (RegisterClientReply) {}

    // Export a maze,
    rpc ExportMaze(ExportMazeRequest) returns (ExportMazeReply) {}
}

message ExportMazeRequest {
    string mazeId = 1;
}

message ExportMazeReply {
    bool success = 1;
    string message = 2;
}

message RegisterClientRequest {
  string mazeId = 1;
  ClientConfig client_config = 2;
}

message RegisterClientReply {
    bool success = 1;
    string message = 2;
    string client_id = 3;
    MazeLocation from_cell = 4;
    MazeLocation to_cell = 5;
}

// SolveMazeRequest is a message sent from the client trying to solve a maze
message SolveMazeRequest{
    string mazeId = 1;  // the id of the maze we are solving
    string client_id = 2;  // the client id
    string direction = 3;  // where the client wants to move next

    // on first connect, this must be set true, the direction field is ignored, the client does not move
    bool initial = 4;

    // move client back to previous location, direction is ignored
    bool move_back = 5;
}

// SolveMazeResponse is a response sent from the server as the client tries to solve a maze
message SolveMazeResponse {
    string maze_id = 1;  // the id of the maze we are solving
    string client_id = 2;  // the client id
    repeated Direction available_directions = 3;  // available directions the client can move from here
    bool initial = 4;  // set true on initial response
    bool error = 5; // set if error occured
    string error_message = 6;
    MazeLocation current_location = 7;
    MazeLocation from_cell = 8;
    MazeLocation to_cell = 9;
    bool solved = 10; // set to true when client reaches the target cell
}

message Direction {
    string name = 1; // e.g. north, south, east, west
    bool visited = 2; // set to true if the client has already visited the cell in that direction
}

// Maze defines a maze and its clients
message Maze {
    string mazeId = 1;
    repeated Cell cells = 2;
    repeated string clientIds = 3;
}

message Cell {
    MazeLocation location = 1;
}

message ListMazeRequest {}

message ListMazeReply {
     repeated Maze mazes = 1;
}

message CreateMazeRequest {
  MazeConfig config = 1;
  bool return_maze = 2; // if set to true, the maze itself is return, ascii encoded
}

message CreateMazeReply {
  string MazeId = 1;
  string encoded_maze = 2;
}

// MazeConfig is the full config for a maze
message MazeConfig {
    int64 Rows = 1;
    int64 Columns = 2;
    bool AllowWeaving = 3;
    double WeavingProbability = 4;
    int64 CellWidth = 5;
    int64 WallWidth = 6;
    int64 WallSpace = 7;
    int64 PathWidth = 8;
    bool ShowDistanceValues = 10;
    bool ShowDistanceColors = 11;
    bool ShowWeightValues = 33;
    bool SkipGridCheck = 12;
    repeated MazeLocation OrphanMask = 13;
    string BgColor = 16;
    string BorderColor = 17;
    string WallColor = 18;
    string CurrentLocationColor = 20;
    string GenDrawDelay = 25;  // time string, e.g. 500ms
    string CreateAlgo = 26;
    double BraidProbability = 27;

    string Id = 28;
    bool Gui = 29;
    string FromFile = 30;
    bool return_maze = 31; // return encoded maze back to the client
    string title = 32;
    // next num: 34
}

// ClientConfig has all the per-client config settings in it
message ClientConfig {
    string SolveAlgo = 1;
    bool DisableDrawOffset = 2;  // used to disable the path draw offset
    int64 DrawPathLength = 3;  // length of path to draw, set to 0 for no path, set to -1 for all of it
    bool MarkVisitedCells = 9; // marks visited cells with squares of varying sizes
    bool NumberMarkVisitedCells = 10; // marks visited cells with numbers
    string AvatarImage = 14;
    string VisitedCellColor = 15;
    string CurrentLocationColor = 16;
    string PathColor = 19;
    string FromCellColor = 21;
    string ToCellColor = 22;
    string FromCell = 23; // "min", "max", "random" or "x,y"
    string ToCell = 24;  // "min", "max", "random" or "x,y"
    bool ShowFromToColors = 27;
}

// MazeLocation is a location in the maze
message MazeLocation {
    int64 X = 1;
    int64 Y = 2;
    int64 Z = 3;
}
